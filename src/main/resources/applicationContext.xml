<?xml version="1.0" encoding="UTF-8"?>
<beans xsi:schemaLocation="http://www.springframework.org/schema/beans
 http://www.springframework.org/schema/beans/spring-beans.xsd
 http://www.springframework.org/schema/context
 http://www.springframework.org/schema/context/spring-context.xsd"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns="http://www.springframework.org/schema/beans">

	<!-- load the properties file: info.properties -->
	<context:property-placeholder location="classpath:info.properties"/>

    <!-- Define your beans here -->
<!-- as i mentioned in other comments by default Spring uses Singletone Scope, you can manually declare it by using: scope = "singleton" etc-->
   		 <bean id="baseBallCoach"
    		class="pt1.BaseBallCoach"
		 scope="prototype"
		 >
			 <constructor-arg ref="myService"/>
			 <property name="email" value="thomas.bolivarr@gmail.com"/>
			 <!-- Now we are getting values from a file "info.properties"-->
			 <property name="firstName" value="${some.firstName}"/>
			 <property name="lastName" value="${some.lastName}"/>
		 </bean>
		<bean id="someKindOfACoach"
		  class="pt1.SomeKindOfACoach"
		  scope="prototype"
	>
		<constructor-arg ref="myService"/>
		<property name="email" value="thomas.bolivarr@gmail.com"/>
		<!-- Now we are getting values from a file "info.properties"-->
		<property name="firstName" value="${some.firstName}"/>
		<property name="lastName" value="${some.lastName}"/>
	</bean>
		<bean id="myService"
		class="pt1.SimpleServiceImplementation">
		</bean>

	<!-- If we want to use setter injection we need to define property for our helper object(dependency)
	EXAMPLE:
	<bean id = "baseBallCoach"
		class = "pt1.BaseBallCoach">
		<property name = "service" ref="myService"/>
	</bean>

	Spring will actually get the property name and will do something like this:
	public void setService (..)
	so in our case the whole picture inside Spring will be looking like:
	BaseBallCoach baseBallCoach = new BaseBallCoach();
	baseBallCoach.setService(MyService);
	same thing with Values, whenever we call property Spring will set "Value" to named property

	-->



</beans>





